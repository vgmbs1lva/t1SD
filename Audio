import zmq
import pyaudio
import threading
import time
import uuid

# Configurações de áudio
CHUNK = 1024
FORMAT = pyaudio.paInt16
CHANNELS = 1
RATE = 44100

client_id = str(uuid.uuid4())  # Gerar um identificador único para o cliente

def receive_audio():
    context = zmq.Context()
    socket = context.socket(zmq.SUB)
    socket.connect("tcp://localhost:5558")
    socket.setsockopt_string(zmq.SUBSCRIBE, "")
    print("Socket SUB de áudio conectado.")
    time.sleep(1)  # Garantir que a conexão esteja estabelecida antes de continuar

    p = pyaudio.PyAudio()
    stream = p.open(format=FORMAT, channels=CHANNELS, rate=RATE, output=True, frames_per_buffer=CHUNK)
    print("Stream de áudio de saída configurado.")

    while True:
        try:
            message = socket.recv_string()
            sender_id, data = message.split('|', 1)
            if sender_id != client_id:
                stream.write(data.encode('latin1'))
                print("Áudio recebido")
        except Exception as e:
            print(f"Erro ao receber áudio: {e}")
            time.sleep(1)

def send_audio():
    context = zmq.Context()
    socket = context.socket(zmq.PUB)
    socket.connect("tcp://localhost:5561")
    print("Socket PUB de áudio conectado.")

    p = pyaudio.PyAudio()
    stream = p.open(format=FORMAT, channels=CHANNELS, rate=RATE, input=True, frames_per_buffer=CHUNK)
    print("Stream de áudio de entrada configurado.")

    while True:
        try:
            data = stream.read(CHUNK, exception_on_overflow=False)
            message = f"{client_id}|{data.decode('latin1')}"
            socket.send_string(message)
            print("Áudio enviado")
        except Exception as e:
            print(f"Erro ao capturar ou enviar áudio: {e}")
            time.sleep(1)

if __name__ == "__main__":
    try:
        receive_thread = threading.Thread(target=receive_audio)
        send_thread = threading.Thread(target=send_audio)
        
        receive_thread.start()
        send_thread.start()
        
        receive_thread.join()
        send_thread.join()
    except Exception as e:
        print(f"Erro ao iniciar threads: {e}")

    # Espera explícita para evitar que o programa termine
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("Programa interrompido pelo usuário.")
