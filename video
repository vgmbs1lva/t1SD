import zmq
import cv2
import numpy as np
import threading

class VideoStream:
    def __init__(self, broker_ip):
        self.context = zmq.Context()

        # Sockets PUB para enviar dados de vídeo
        self.video_pub = self.context.socket(zmq.PUB)
        self.video_pub.connect(f"tcp://{broker_ip}:5558")

        # Sockets SUB para receber dados de vídeo
        self.video_sub = self.context.socket(zmq.SUB)
        self.video_sub.connect(f"tcp://{broker_ip}:5559")
        self.video_sub.setsockopt_string(zmq.SUBSCRIBE, "")

    def send_video(self):
        cap = cv2.VideoCapture(0)
        while cap.isOpened():
            ret, frame = cap.read()
            if not ret:
                break
            _, buffer = cv2.imencode('.jpg', frame)
            self.video_pub.send(buffer.tobytes())

    def receive_video(self):
        cv2.namedWindow("Video Stream", cv2.WINDOW_NORMAL)
        while True:
            data = self.video_sub.recv()
            np_array = np.frombuffer(data, np.uint8)
            frame = cv2.imdecode(np_array, cv2.IMREAD_COLOR)
            cv2.imshow("Video Stream", frame)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
        cv2.destroyAllWindows()

    def start(self):
        send_thread = threading.Thread(target=self.send_video)
        receive_thread = threading.Thread(target=self.receive_video)
        send_thread.start()
        receive_thread.start()

if __name__ == "__main__":
    broker_ip = "189.100.68.70"  # Use o endereço IP interno para testes locais
    video_stream = VideoStream(broker_ip=broker_ip)
    video_stream.start()
